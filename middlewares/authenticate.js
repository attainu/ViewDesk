const jwt = require('jsonwebtoken')
require('dotenv').config()

let authenticate = {}

/** authenticate Admin routes */
authenticate.admAuth = (req, res, next) => {

    const header = req.headers['authorization']

    // checking for req.header
    if (typeof header !== undefined) {
        const bearer = header.split(' ')
        const token = bearer[1]
        // token verification
        const data = jwt.verify(token, process.env.JWT_KEY)

        if (data) {
            // checks token generated by Admin
            if (data.role.toLowerCase() == 'admin')
                next()
            else res.json({ status: false, message: 'Protected route. Only Admin access'})
        }
        else res.json({ status: false, message: 'Token Expired' })
    }
    else res.status(403).json({ status: false, message: 'Token not found' })
}

/** Authenticates profrssor routes */
authenticate.proAuth = (req, res, next) => {
    
    const header = req.headers['authorization']

    // checking for req.header
    if (typeof header !== undefined) {
        const bearer = header.split(' ')
        const token = bearer[1]
        // token verification
        const data = jwt.verify(token, process.env.JWT_KEY)

        if (data) {
            // checks token generated by Professor
            if (data.role.toLowerCase() == 'professor')
                next()
            else res.json({ status: false, message: 'Protected route. Only Professor access'})
        }
        else res.json({ status: false, message: 'Token Expired' })
    }
    else res.status(403).json({ status: false, message: 'Token not found' })
}

/** Authenticates Librarian routes */
authenticate.libAuth = (req, res, next) => {
   
    const header = req.headers['authorization']

    // checking for req.header
    if (typeof header !== undefined) {
        const bearer = header.split(' ')
        const token = bearer[1]
        // token verification
        const data = jwt.verify(token, process.env.JWT_KEY)

        if (data) {
            // checks token generated by Librarian
            if (data.role.toLowerCase() == 'librarian')
                next()
            else res.json({ status: false, message: 'Protected route. Only Librarian access'})
        }
        else res.json({ status: false, message: 'Token Expired' })
    }
    else res.status(403).json({ status: false, message: 'Token not found' })
}

/** Authenticate Student routes */
authenticate.stdAuth = (req, res, next) => {
  
    const header = req.headers['authorization']

    // checking for req.header
    if (typeof header !== undefined) {
        const bearer = header.split(' ')
        const token = bearer[1]
        // token verification
        const data = jwt.verify(token, process.env.JWT_KEY)

        if (data) {
            // checks token generated by Student
            if (data.role.toLowerCase() == 'student')
                next()
            else res.json({ status: false, message: 'Protected route. Only Student access'})
        }
        else res.json({ status: false, message: 'Token Expired' })
    }
    else res.status(403).json({ status: false, message: 'Token not found' })
}

module.exports = authenticate